swagger: '2.0'
info:
  title: Signhost api
  description: Integrate with signhost using our API to create transactions and retrieve current status.
  version: "1.0"
  contact: 
    name: "support@signhost.com"
host: api.signhost.com
schemes:
  - https
produces:
  - application/json
parameters:
  AppkeyParam:
    name: Application
    description: The APPKey
    in: header
    type: string
    required: true
  ApiKeyParam:
    name: Authorization
    description: The API key
    in: header
    type: string
    required: true

paths:
  '/api/transaction/{transactionId}':
    get:
      description: Returns current transaction details
      parameters:
        - name: transactionId
          description: ID of the transaction
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Details of the transaction
          schema:
            $ref: "#/definitions/Transaction"
        '401':
          description: Not authorized to access the specified transaction
        '410':
          description: |
            The transaction details are no longer available and as a result the returned JSON only contains partial historical data.
            This happens when we cleaned the transaction for example due to reaching an end status (any status above 30),
            or the expiration dates have expired.
    delete:
      description: |
        Delete a transaction by a transaction id.
        When a transaction is not in an end-state (such as fully signed) the transaction will be cancelled and cleaned.
        A cancelled transaction can be told to send an e-mail notification to the awaiting signers that the transaction was cancelled.
        The status of the transaction will be set to cancelled.
        
        When a transaction is in an end-state the transaction the transaction will be cleaned. 
        The status of the transaction will remain the same but we will clean any uploaded documents and sensitive data as soon as possible.
      parameters:
        - name: transactionId
          type: string
          description: ID of the transaction
          in: path
          required: true
        - name: body
          in: body
          description: Cancellation details
          required: false
          schema:
            type: object
            properties:
              SendNotifications:
                type: boolean
                description: Send e-mail notifications to the awaiting signers.
                default: false
              Reason:
                type: string
                description: The reason of cancellation.
      responses:
        '200':
          description: The transaction is succesfully deleted
        '400':
          description: The transaction could not be deleted.
          schema:
            $ref: '#/definitions/ErrorModel'
            
  '/api/transaction/{transactionId}/file/{fileId}/':
    get:
      description: Returns the (signed) document(s).
      produces:
      - 'application/pdf'
      - 'application/json'
      parameters:
        - name: transactionId
          description: ID of the description
          in: path
          required: true
          type: string
        - name: fileId
          description: A unique identifier provided by you for the file.
          in: path
          required: true
          type: string
      responses:
        '200':
          description: The contents of the file is returned in the body.

  '/api/file/receipt/{transactionId}':
    get:
      description: Returns the receipt when the transaction is successfully signed (Status=30)
      produces:
      - 'application/pdf'          
      parameters:
        - name: transactionId
          description: ID of the description
          in: path
          required: true
          type: string
      responses:
       '200':
          description: (signed) document(s)

  '/api/transaction':
    post:
      description: Creates a new transaction
      parameters:
        - in: body
          name: transaction
          description: Transaction to be added
          required: true
          schema:
            $ref: "#/definitions/Transaction"
      responses:
        '200':
          description: Details of the created transaction.
          schema:
            $ref: "#/definitions/Transaction"
        '401':
          description: Not authorized to create a transaction.

  '/api/transaction/{transactionId}/file/{fileId}':
    put:
      description: |
        Add a file to the transaction or overwrite an existing file with the same {fileId}.
        The file parameter can either be the PDF document or JSON <a href="##/definitions/FileMetaData">metadata</a>.
        Metadata must always be supplied first.
        Only PDF documents with Content-Type 'application/pdf' are accepted.
        Related posts [How to create a transaction with api generated fields](/api/howto/2016/10/06/api-generated-fields.html), [howto create a transaction with fillable pdf fields](/api/howto/2016/04/21/howto-create-a-transaction-with-fillable-pdf-fields.html).

        #### File digest header
        When uploading a file it is possible to send a digest header along with the http request.
        This header should contain a base64 encoded SHA checksum of the uploaded file.
        For more information please refer to the [RFC 3230](https://www.ietf.org/rfc/rfc3230.txt) and [RFC 5843](https://www.ietf.org/rfc/rfc5843.txt) specifications.

        For example: `Digest: SHA-256=HtHRpLOZBEMnTpQS6Zn12veC4uhjtMwamfVAwmPQPmE=`
      consumes:
        - 'application/pdf'
        - 'application/json'
      parameters:
        - name: transactionId
          description: ID of an existing -- not yet started -- transaction
          in: path
          required: true
          type: string
        - name: fileId
          description: A unique identifier provided by you for the file.
          in: path
          required: true
          type: string
        - name: file
          description: |
            File or file metadata.
            When the Content-Type is 'application/pdf' we expect the body to contain a valid PDF document which is to be signed by one or more signers.
            If you provide 'application/json' as a Content-Type we expect the body to contain a file meta data json.
          in: body
          required: true
          schema:
            $ref: "#/definitions/FileMetaData"
      responses:
        '201':
          description: File succesfully created and added to the transaction
        '204':
          description: Existing file replaced within the specified transaction
        '202':
          description: File meta data accepted, waiting for actual file content
        '409':
          description: |
            Conflict while trying to overwrite the file.
            You have used the same fileId again which causes us to overwrite the file (which is a valid action).
            However the same fileId was provided in a too short time interval making it unclear which version was meant to be the latest version.
  '/api/transaction/{transactionId}/start':
    put:
      description: Starts a transaction with the same {transactionId}
      parameters:
        - name: transactionId
          description: ID of an existing -- not yet started -- transaction
          in: path
          required: true
          type: string
      responses:
        '204':
          description: The transaction is started.
        '400':
          description: The transaction could not be started. Most probably causes are that the created transactions contains errors causing the transaction to be in Failed status.
          schema:
            $ref: '#/definitions/ErrorModel'
            
definitions:
  Transaction:
    type: object
    properties:
      Id:
        readOnly: true
        type: string
        description: |
          The id of the transaction.
          Currently this property is read only but this may change in the future.
      Files:
        readOnly: true
        type: object
        description: A map of files attached to this transaction.
        additionalProperties:
          $ref: '#/definitions/FileEntry'
      Seal:
        type: boolean
        default: true
        description: Seal the document before sending to the signers.
      Signers:
        type: array
        description: The signer information, max 4 signers.
        items:
          type: object
          required:
          - Email
          properties:
            Id:
              type: string
              description: |
                The id of the signer, must be unique within a transaction.
                If you don't provide an id we will generate one for you.
            Email:
              type: string
              description: The e-mail address of the signer
              example: "john.doe@example.com"
            IntroText:
              type: string
              description: |
                An intro text to show to the user during the sign proces.
                This will be shown on the first screen to the signer and supports limitted markdown markup.
            Verifications:
              description: |
                List of verifications that the signer has to verify with.
                The order in which the verifications are provided determine in which order the signer will have to perform the specified method.
                You **must** use one of the following verifications as the last method:
                - Consent
                - PhoneNumber
                - Scribble
              type: array
              items:
                $ref: '#/definitions/Verification'
            SendSignRequest:
              description: Send a sign invitation to the signer his e-mail address.
              default: false
              type: boolean
            SignUrl:
              description: |
                A unique URL per signer that provides the signing flow for the signer.
                Available / valid if `SendSignRequest` is set to false.
              type: string
              readOnly: true
            SignRequestMessage:
              description: |
                The message of the sign request in plain text.
                Newlines can be created by including a \n in the json, HTML is not allowed.
                Required if `SendSignRequest` is true
              type: string
            SendSignConfirmation:
              description: |
                Send the sign confirmation to the signer his e-mail address.
                Default value is the value of `SendSignRequest`
              type: boolean
            Language:
              description: The language of the receiving user, only de-DE, en-US, es-ES, fr-FR, it-IT and nl-NL are allowed.
              default: nl-NL
              type: string
              enum:
              - de-DE
              - en-US
              - es-ES
              - fr-FR
              - it-IT
              - nl-NL
            ScribbleName:
              description: The name of the signer, this will be pre filled in the scribble form.
              type: string
            DaysToRemind:
              description: |
                Amount of days before reminding the signers. -1 to disable reminders.
                Ignored if `SendSignRequest` is set to false.
              default: 7
              type: integer
            Expires:
              description: When set the signer is no longer allowed to sign the transaction after this date.
              type: string
              format: date-time
            Reference:
              description: The reference of the signer.
              type: string
            ReturnUrl:
              description: The url to redirect the user to after signing, rejecting or cancelling.
              default: https://signhost.com
              type: string
            Activities:
              type: array
              readOnly: true
              description: |
                List of activities attached to this signer.
                Activities are added by signhost when a signer event occured.
              items:
                type: object
                properties:
                  Id:
                    type: string
                  Code:
                    type: integer
                    enum:
                    - 101
                    - 102
                    - 103
                    - 104
                    - 105
                    - 201
                    - 202
                    - 203
                    - 301
                    - 302
                    - 303
                    - 401
                    - 402
                    - 403
                    description: |
                      * 101 -	Invitation sent
                      * 102 -	Received
                      * 103 -	Opened
                      * 104 -	Reminder sent
                      * 105 -	Document opened, Info property contains the file id of the opened document.
                      * 201 -	Cancelled
                      * 202 -	Rejected
                      * 203 -	Signed
                      * 301 -	Signed document sent
                      * 302 -	Signed document opended
                      * 303 -	Signed document downloaded
                      * 401 -	Receipt sent
                      * 402 -	Receipt opened
                      * 403 -	Receipt downloaded
                  Info:
                    type: string
                    description: May contain additional information belonging to this activity
                  CreatedDateTime:
                    type: string
                    format: date-time
      Receivers:
        type: array
        items:
          type: object
          required:
          - Name
          - Email
          - Message
          properties:
            Name:
              type: string
              description: The name of the receiver.
            Email:
              type: string
              description: The e-mail address of the reveiver.
            Language:
              type: string
              description: The language of the receiver, only de-DE, en-US, es-ES, fr-FR, it-IT and nl-NL are allowed.
              default: nl-NL
            Message:
              type: string
              description: The email message towards the receiver in plain text. Newlines can be created by including a \n in the json, HTML is not allowed.
            Reference:
              type: string
              description: The reference of the receiver.
      Reference:
        type: string
        description: The reference of the transaction. For example "1234"
      PostbackUrl:
        type: string
        description: The absolute url to postback the status updates. For example https://example.com/postback.php
      SignRequestMode:
        type: integer
        format: int32
        description: |
          Set to 1 for sending at once, to 2 for sequential.
          Ignored if `SendSignRequest` is set to false.
        default: 2
      DaysToExpire:
        type: integer
        format: int32
        description: Amount of days before expiration. Max 90 days.
        default: 60
      SendEmailNotifications:
        type: boolean
        description: Send e-mail notifications to the sender.
        default: false
      Status:
        type: integer
        format: int32
        description: |
          Current transaction status.

          * 5 - Waiting for document
          * 10 - Waiting for signer
          * 20 - In progress
          * 30 - Signed (end state)
          * 40 - Rejected (end state)
          * 50 - Expired (end state)
          * 60 - Cancelled (end state)
          * 70 - Failed (end state)
        enum:
        - 5
        - 10
        - 20
        - 30
        - 40
        - 50
        - 60
        - 70
      CancelationReason:
        type: string
        description: The original cancellation reason given during a DELETE call.
      Context:
        type: object
        description: Any valid json object which we will return back to you when doing a GET on the transaction or when we send a postback.

  Verification:
    type: object
    discriminator: Type
    properties:
      Type:
        type: string
        enum:
          - Consent
          - DigiD
          - eHerkenning
          - iDeal
          - iDIN
          - Kennisnet
          - PhoneNumber
          - Scribble
          - SigningCertificate 
          - SURFnet
        description:
          Type of the verification object.
          The `Type` property **must** be the first property in the json!

    required:
    - Type

  Consent:
    allOf:
    - $ref: '#/definitions/Verification'
    - type: object
      description: |
        Adds a consent step to the signing process.
    example: |
      A consent verification response may have the following content:
      ```json
      {
        "Type": "Consent"
      }
      ```

  DigiD:
    allOf:
    - $ref: '#/definitions/Verification'
    - type: object
      description: |
        Adds a DigiD step to the signing process.
      properties:
        Bsn:
          type: string
          description: |
            When provided, the provided value must match the BSN of the credentials returned by DigiD.
            The BSN is required to match an '11-proef'.
    example: | 
      A DigiD verification response may have the following content:
      ```json
      {
          "Type": "DigiD",
          "Bsn": "910078476"
        }
      }
      ```
  eHerkenning:
    allOf:
    - $ref: '#/definitions/Verification'
    - type: object
      properties:
        Uid:
          type: string
        EntityConcernIdKvkNr:
          type: string

  iDeal:
    allOf:
    - $ref: '#/definitions/Verification'
    - type: object
      properties:
        Iban:
          type: string
          description: |
            The IBAN of the signer.
            When provided during the creation of the transaction this IBAN is
            verified during the verification flow to make sure these and the actual IBAN number match.
          example: "NL13TEST0123456789"
        AccountHolderName:
          type: string
          readOnly: true
        AccountHolderCity:
          type: string
          readOnly: true
    example: | 
      An iDeal verification response may have the following content:
      ```json
      {
          "Type": "iDeal",
          "Iban": "NL01ABNA0123456789",
          "AccountHolderName": "DOE J",
          "AccountHolderCity": ""
        }
      }
      ```

  iDIN:
    allOf:
    - $ref: '#/definitions/Verification'
    - type: object
      properties:
        AccountHolderName:
          type: string
          readOnly: true
          description: |
            Name of the idin consumer / signer.
            Currently we don't support supplying a value in this property to ensure the expected account holder name matches.
            This could change in the future.
        AccountHolderAddress1:
          type: string
          readOnly: true
        AccountHolderAddress2:
          type: string
          readOnly: true
        AccountHolderDateOfBirth:
          type: string
          format: date
          readOnly: true
          description: Date of birth of idin consumer / signer
          example: 2001-12-31
        Attributes:
            type: map of string
            readOnly: true
            description: |
              Contains all available iDIN attributes.
              These attributes may change, therefore we cannot guarantee the availability of any of these attributes.
    example: | 
      An iDIN verification response may have the following content:

      ```json
      {
        "Type": "iDIN",
        "AccountHolderName": "John Doe",
        "AccountHolderDateOfBirth": "2001-12-31",
        "AccountHolderAddress1": "Straatlaan 123 AB",
        "AccountHolderAddress2": "AMSTERDAM 1234AB",
        "Attributes": {
            "urn:nl:bvn:bankid:1.0:consumer.bin": "xxxxx",
            "urn:nl:bvn:bankid:1.0:bankid.deliveredserviceid": "12345",
            "urn:nl:bvn:bankid:1.0:consumer.housenosuf": "AB",
            "urn:nl:bvn:bankid:1.0:consumer.postalcode": "1234AB",
            "urn:nl:bvn:bankid:1.0:consumer.houseno": "123",
            "urn:nl:bvn:bankid:1.0:consumer.initials": "JN",
            "urn:nl:bvn:bankid:1.0:consumer.street": "Straatlaan",
            "urn:nl:bvn:bankid:1.0:consumer.dateofbirth": "19800124",
            "urn:nl:bvn:bankid:1.0:consumer.legallastname": "Doe",
            "urn:nl:bvn:bankid:1.0:consumer.country": "NL",
            "urn:nl:bvn:bankid:1.0:consumer.city": "AMSTERDAM",
            "urn:nl:bvn:bankid:1.0:consumer.preferredlastname": "Doe",
            "urn:nl:bvn:bankid:1.0:consumer.addressextra": "#",
            "urn:nl:bvn:bankid:1.0:consumer.gender": "1",
            "urn:nl:bvn:bankid:1.0:consumer.partnerlastname": "Roe",
            "urn:nl:bvn:bankid:1.0:consumer.legallastnameprefix": "van der",
            "urn:nl:bvn:bankid:1.0:consumer.preferredlastnameprefix": "van der"
        }
      }
      ```
  IPAddress:
    allOf:
    - $ref: '#/definitions/Verification'
    - type: object
      properties:
        IPAddress:
          type: string
          readOnly: true
    example: |
      An IP Address verification response may have the following content:
      ```json
      {
        "Type": "IPAddress",
        "IPAddress": "198.51.100.42"
      }
      ```
  Kennisnet:
    allOf:
    - $ref: '#/definitions/Verification'
    - type: object

  PhoneNumber:
    allOf:
    - $ref: '#/definitions/Verification'
    - type: object
      properties:
        Number:
          type: string
          description: |
            The mobile phone number of the signer.
            Must conform to E.164,
            [the international public telecommunication numbering plan](https://en.wikipedia.org/wiki/E.164),
            which requires the country calling code (e.g. +31).
          example: "+31123456789"
          required: true
    example: |
      A phone number verification response may have the following content:
      ```json
      {
        "Type": "PhoneNumber",
        "Number": "+31123456789"
      }
      ```

  Scribble:
    allOf:
    - $ref: '#/definitions/Verification'
    - type: object
      properties:
        RequireHandsignature:
          type: boolean
          default: false
          description: |
            When set the signer is required to draw a hand signature,
            either via computer mouse, trackpad, or touchscreen.
        ScribbleNameFixed:
          type: boolean
          default: false
          description: |
            When set the signer will not be able to change its scribble name.
            When not set the signer can correct or provide a scribble name.
        ScribbleName:
          type: string
          description: |
             The name of the signer, this will be pre filled in the scribble form.
             Required if `ScribbleNameFixed` is set.
    example: |
      A scribble verification response may have the following content:
      ```json
      {
        "Type": "Scribble",
        "RequireHandsignature": true,
        "ScribbleName": "John Doe"
      }
      ```

  SigningCertificate:
    allOf:
    - $ref: '#/definitions/Verification'
    - type: object
      description: |
        A signing certificate allows a signer to sign a document with its own certificate,
        among others with a qualified certificate.
      properties:
        Issuer:
          type: string
          readOnly: true
        Subject:
          type: string
          readOnly: true
        Thumbprint:
          type: string
          readOnly: true
    example: |
      A signing certificate verification response may have the following content:
      ```json
      {
        "Type": "SigningCertificate",
        "Issuer": "CN=John Doe QC POC SELFSIGNED, C=NL, S=Noord-Holland, L=Haarlem, E=example@example.org, OU=IT, O=Evidos B.V.",
        "Subject": "CN=John Doe QC POC SELFSIGNED, C=NL, S=Noord-Holland, L=Haarlem, E=example@example.org, OU=IT, O=Evidos B.V.",
        "Thumbprint": "2B31AD44D93BE1FAED6B18A23ADF1BDD4DA0ECE8"
      }
      ```

  SURFnet:
    allOf:
    - $ref: '#/definitions/Verification'
    - type: object
  
  FileEntry:
    type: object
    properties:
      Links: 
        type: array
        items:
          $ref: '#/definitions/Link'
      DisplayName:
        type: string
        description: The name of the document that was displayed to the user while signing the documents.

  Link:
    type: object
    properties:
      Rel: 
        type: string
        description: The type of file you can download.
        enum:
          - file
          - receipt
          - signer.sign
          - signer.download
      Type:
        type: string
        description: The type of the file you can expect to download. Include this in your 'Accept' header when requesting the file.
      Link:
        type: string
        description: Url containing the link to the file.

  FileMetaData:
    type: object
    properties:
      DisplayOrder:
        type: integer
        description: With what order number we'll display the file to the signer
      DisplayName:
        type: string
        description: With what name we'll display the file to the signer
      Description:
        type: string
        description: With what description we'll display the file to the signer
      SetParaph:
        type: bool
        description: |
          Places a copy of the signer's scribble image on the bottom right of every page where no signature is present.
          Note: due to the nature of advanced or qualified digital signatures, paraphs are merely a cosmetic addition.
      Signers:
        type: object
        description: |
          Map of array of formsets. 
          Each key should be a valid signer id.
        additionalProperties:
          type: object
          properties:
            FormSets:
              type: array
              description: List of formset keys to be assigned to this signer.
              items:
                type: string
      FormSets:
        type: object
        description: |
          Map of one or more form set definitions.
          The key of the map will be the formset name.
          The value will be the formset definition
        additionalProperties:
          type: object
          description: |
            Map of pdf field definitions
            The key of the map will be the field name.
            The value will be the definition of the field.
          additionalProperties:
            type: object
            properties:
              Type:
                type: string
                enum:
                - Seal
                - Signature
                - Check
                - SingleLine
                description: |
                  Field type to create.

                  * Seal is not yet implemented, this will specify the properties of a seal.
                  * Signature, specifies a signature field
                  * Check, specifies a checkbox. You'll have to set the `value` property
                  * SingleLine, specifies a single line textbox
              Location:
                type: object
                description: Specify where the field should be placed within the document.
                properties:
                  Search:
                    type: string
                    description: The text to search in the pdf document to use as the position for the field. For example `{{Signer1}}`.
                  Occurence:
                    type: integer
                    description: When using text search, only match this matched occurence.
                  Top:
                    type: integer
                    description: Offset from the top of the search text or the page
                  Right:
                    type: integer
                    description: Offset from the right of the search or the page
                  Bottom:
                    type: integer
                    description: Offset from the bottom of the search or the page
                  Left:
                    type: integer
                    description: Offset from the left of the search or the page
                  Width:
                    type: integer
                    description: |
                      The width of the field, can’t be used when both Left and Right are specified.
                      For signature and seal fields we suggest a width of 140.
                  Height:
                    type: integer
                    description: |
                      The height of the field, can’t be used when both Bottom and Top are specified.
                      For signature and seal fields we suggest a height of 70.
                  PageNumber:
                    type: integer
                    description: On which page the field should be placed.
    example: |
      Simple example which performs a scan for the `{{Signer1}}` mustache tag 
      and creates a Signature fields named SignatureOne on the found location(s).
      
      ```
        {
          "DisplayName": "Your personal contract",
          "SetParaph": true,
          "Signers": {
            "SomeSignerId": {
              "FormSets": [ "FirstFormset" ]
            }
          },
          "FormSets": {
            "FirstFormset": {
              "SignatureOne": {
                "Type": "Signature",
                "Location": {
                  "Search": "{{Signer1}}",
                  "Width": 140,
                  "Height": 70
                }
              }
            }
          }
      }
      ```
  ErrorModel:
    type: object
    properties:
      Message: 
        type: string
        description: Message describing the error in the request.
  
